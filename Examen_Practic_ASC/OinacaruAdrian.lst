     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, fopen, fclose, fprintf, printf, scanf,fread      
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll    
    11                                  import fopen msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import fclose msvcrt.dll
    15                                  import scanf msvcrt
    16                                  import fread msvcrt
    17                                  
    18                                  
    19                                  ; our data is declared here (the variables needed by our program)
    20                                  segment data use32 class=data  
    21 00000000 7072756566756E672E-     file_name db "pruefung.txt", 0 
    21 00000009 74787400           
    22 0000000D 6F75747075742E7478-     file_name_output db "output.txt", 0 
    22 00000016 7400               
    23 00000018 7200                    access_mode db "r", 0      
    24 0000001A 7700                    access_mode_write db "w", 0      
    25 0000001C FFFFFFFF                file_descriptor dd -1       
    26                                  len equ 100                 
    27 00000020 00<rept>                text times (len+1) db 0  
    28 00000085 00000000                exists dd 0
    29 00000089 00000000                sum dd 0  
    30 0000008D 256400                  format db "%d", 0
    31 00000090 4B65696E65205A6966-     format_keine db "Keine Ziffer", 0
    31 00000099 66657200           
    32                                  
    33                                  ; our code starts here
    34                                  segment code use32 class=code
    35                                      start:
    36                                           ;wir lesen die Data from file
    37 00000000 68[18000000]                     push dword access_mode
    38 00000005 68[00000000]                     push dword file_name
    39 0000000A FF15[00000000]                   call [fopen]
    40 00000010 83C408                           add esp, 4*2
    41                                           
    42 00000013 A3[1C000000]                     mov [file_descriptor], eax
    43                                           
    44 00000018 83F800                           cmp eax, 0
    45 0000001B 0F84D4000000                     je final
    46                                           
    47 00000021 FF35[1C000000]                   push dword [file_descriptor]
    48 00000027 6A64                             push dword len
    49 00000029 6A01                             push dword 1
    50 0000002B 68[20000000]                     push dword text
    51 00000030 FF15[00000000]                   call [fread]
    52 00000036 83C410                           add esp, 4*4
    53                                           
    54                                           ;wir uberprufen ob es eine ziffer ist
    55                                           verificare:
    56 00000039 89C1                             mov ecx, eax
    57 0000003B BE00000000                       mov esi, 0
    58 00000040 E324                             jecxz gata
    59                                           repeta:
    60 00000042 8A86[20000000]                      mov al, [text+esi]
    61 00000048 3C30                                cmp al, '0'
    62 0000004A 7C17                                jl not_number
    63                                               
    64 0000004C 3C39                                cmp al, '9'
    65 0000004E 7F13                                jg not_number
    66                                               
    67 00000050 2C30                                sub al, 48
    68 00000052 0005[89000000]                      add [sum], al
    69 00000058 C705[85000000]0100-                 mov [exists], dword 1
    69 00000060 0000               
    70 00000062 46                                  inc esi
    71                                              
    72                                             not_number:
    73 00000063 46                                 inc esi
    74 00000064 E2DC                               loop repeta
    75                                     
    76                                           gata:
    77                                           
    78                                           formatare:
    79 00000066 A1[89000000]                     mov eax, [sum]
    80 0000006B BB00000000                       mov ebx, 0 ; in ebx speichern wir die Summe
    81                                              
    82                                              sum_of_digits:
    83 00000070 BA00000000                              mov edx, 0 ; wir telien mit 10 und addieren den Rest
    84 00000075 B90A000000                              mov ecx, 10
    85 0000007A F7F1                                    div ecx
    86 0000007C 01D3                                    add ebx, edx
    87 0000007E 83F800                                  cmp eax, 0
    88                                                  
    89                                                 
    90 00000081 7402                                    je sum_is_ready
    91 00000083 EBEB                                jmp sum_of_digits
    92                                           ;wir uberprufen ob es grosser al 10 ist
    93                                           sum_is_ready:
    94 00000085 891D[89000000]                   mov [sum], ebx
    95 0000008B 83FB09                           cmp ebx, 9
    96 0000008E 7FD6                             jg formatare
    97                                           
    98                                           ;wir bereiten den file fur das schreiben vor
    99 00000090 68[1A000000]                     push dword access_mode_write
   100 00000095 68[0D000000]                     push dword file_name_output
   101 0000009A FF15[00000000]                   call [fopen]
   102 000000A0 83C408                           add esp, 4*2
   103                                           
   104 000000A3 A3[1C000000]                     mov [file_descriptor], eax
   105                                           
   106 000000A8 83F800                           cmp eax, 0
   107 000000AB 7448                             je final
   108                                           ;wir uberprufen ob keine ziffer gelesen wurden
   109 000000AD 833D[85000000]01                 cmp dword [exists], 1
   110 000000B4 7416                             je mai_departe
   111 000000B6 68[90000000]                     push dword format_keine
   112 000000BB FF35[1C000000]                   push dword [file_descriptor]
   113 000000C1 FF15[00000000]                   call [fprintf]
   114 000000C7 83C408                           add esp, 4*2
   115 000000CA EB29                             jmp final
   116                                           mai_departe:
   117                                           ;wir schreiben die fertige Summe
   118 000000CC FF35[89000000]                   push dword [sum]
   119 000000D2 68[8D000000]                     push dword format
   120 000000D7 FF35[1C000000]                   push dword [file_descriptor]
   121 000000DD FF15[00000000]                   call [fprintf]
   122 000000E3 83C40C                           add esp, 4*3
   123                                           
   124 000000E6 FF35[1C000000]                   push dword [file_descriptor]
   125 000000EC FF15[00000000]                   call [fclose]
   126 000000F2 83C404                           add esp, 4
   127                                           
   128                                           
   129                                           
   130                                           final:
   131                                           
   132                                          ;der Algorithmus nimmt alle Charakteren von der gegebenen Datei und uberpruft ob sie Ziffern sind, falls das der Fall ist, werden sie zu eine Variabile sum addiert, dann wird diese uberpruft, ob man noch ein
   133 000000F5 6A00                            push    dword 0
   134 000000F7 FF15[00000000]                  call    [exit]
